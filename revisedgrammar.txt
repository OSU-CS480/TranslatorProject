T -> S

S -> expr S | expr

expr-> intexpr | floatexpr | strexpr | boolexpr | stmt

# floats can be used in integer expressions, they are implicitely cast, likewise for ints in floatexpr
intexpr -> [intbinop intexpr intexpr] | [intunop intexpr] | floatexpr | T_INT | T_ID
intbinop -> T_PLUS | T_MINUS | T_MULT | T_DIV | T_MOD | T_EXP
intunop -> T_MINUS | T_SIN | T_COS | T_TAN

floatexpr -> [floatbinop floatexpr floatexpr] | [floatunop floatexpr] | intexpr | T_FLOAT | T_ID
floatbinop -> T_PLUS | T_MINUS | T_MULT | T_DIV 
floatunop -> T_MINUS | T_SIN | T_COS | T_TAN

strexpr -> [T_PLUS strexpr strexpr] | T_CONSTSTR | T_ID

# no implicit casting of integer 1 to true, etc
boolexpr -> [boolbinop boolexpr boolexpr] | [boolunop boolexpr] | 
    [boolbinopfornum intexpr intexpr] | [boolbinopfornum intexpr floatexpr] | 
    [boolbinopfornum floatexpr intexpr] | [boolbinopfornum floatexpr floatexpr] | 
    [boolbinopfornum strexpr strexpr] | T_BOOL | T_ID
boolbinop -> T_EQ | T_NOTEQ | T_AND | T_OR
boolbinopfornum -> T_EQ | T_NOTEQ

exprlist -> expr | expr exprlist

varlist -> [type T_ID] | [type T_ID] varlist

stmt -> [ifstmt] | [whilestmt] | [letstmt] | [printstmt] | [assignstmt]

# if cond then doexpr else dootherexpr
# if cond then doexpr
ifstmt -> T_IF boolexpr expr expr | T_IF expr expr

whilestmt -> T_WHILE expr exprlist
letstmt -> T_LET varlist
printstmt -> T_STDOUT expr
assignstmt -> T_ASSIGN T_ID expr

type -> T_STRINGTYPE | T_INTTYPE | T_FLOATTYPE | T_BOOLTYPE
